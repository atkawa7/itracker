<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC 
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping auto-import="true">

	<class name="org.itracker.model.Issue" table="issuebean">
		<id name="id" column="id" type="int" unsaved-value="null">
			<generator class="native"/>
		</id>
		<property name="createDate" column="create_date" not-null="true" unique="false"/>
		<property name="lastModifiedDate" column="last_modified" not-null="true" unique="false"/>		
		<property name="description" not-null="true" unique="false"/>		
		<property name="severity" not-null="true" unique="false"/>				
		<property name="status" not-null="true" unique="false"/>		
		<property name="resolution" unique="false"/>				
		<many-to-one name="project" column="project_id" class="org.itracker.model.Project"/>		
		<many-to-one name="creator" column="creator_id" class="org.itracker.model.User"/>		
		<many-to-one name="owner" column="owner_id" class="org.itracker.model.User"/>						
		<many-to-one name="targetVersion" column="target_version_id" class="org.itracker.model.Version"/>								

		<bag name="components" table="issue_component_rel" lazy="true">
			<key>
				<column name="issue_id"/>
			</key>
			<many-to-many class="org.itracker.model.Component" column="component_id" outer-join="auto"/>
		</bag>
		<bag name="versions" table="issue_version_rel" lazy="true">
			<key>
				<column name="issue_id"/>
			</key>
			<many-to-many class="org.itracker.model.Version" column="version_id" outer-join="auto"/>
		</bag>		
		<bag name="notifications" table="Notification" cascade="all" lazy="true">
			<key>
				<column name="issue_id"/>
			</key>
			<one-to-many class="org.itracker.model.Notification"/>
		</bag>
		<bag name="attachments" table="IssueAttachment" cascade="all" lazy="true">
			<key>
				<column name="issue_id"/>
			</key>
			<one-to-many class="org.itracker.model.IssueAttachment"/>
		</bag>
		<bag name="fields" table="IssueField" cascade="all" lazy="true">
			<key>
				<column name="issue_id"/>
			</key>
			<one-to-many class="org.itracker.model.IssueField"/>
		</bag>			
		<bag name="history" table="IssueHistory" cascade="all" lazy="true">
			<key>
				<column name="issue_id"/>
			</key>
			<one-to-many class="org.itracker.model.IssueHistory"/>
		</bag>		
		<bag name="relations" table="IssueRelation" cascade="all" lazy="true">
			<key>
				<column name="issue_id"/>
			</key>
			<one-to-many class="org.itracker.model.IssueRelation"/>
		</bag>				
		<bag name="activities" table="IssueActivity" cascade="all" lazy="true">
			<key>
				<column name="issue_id"/>
			</key>
			<one-to-many class="org.itracker.model.IssueActivity"/>
		</bag>	
	</class>
    
    <!-- Named queries (loaded, validated and cached at application startup). -->
    
    <query name="IssuesAllQuery"><![CDATA[
    select issue 
    from Issue as issue ]]>
    </query>
    
    <query name="IssuesByStatusQuery"><![CDATA[
    select issue 
    from Issue as issue 
    where issue.status = :issueStatus ]]>
    </query>
    
    <query name="IssuesByStatusLessThanQuery"><![CDATA[
    select issue 
    from Issue as issue 
    where issue.status < :maxExclusiveStatus ]]>
    </query>
    
    <query name="IssuesByStatusLessThanEqualToQuery"><![CDATA[
    select issue 
    from Issue as issue 
    where issue.status <= :maxStatus ]]>
    </query>
    
    <query name="IssuesByStatusLessThanEqualToInAvailableProjectsQuery"><![CDATA[
    select issue 
    from Issue as issue 
    inner join issue.project as project 
    where project.status in (1, 2)  
    and issue.status <= :maxStatus ]]>
    </query>
    
    <query name="IssuesBySeverityQuery"><![CDATA[
    select issue 
    from Issue as issue 
    where issue.severity = :severity ]]>
    </query>
    
    <query name="IssuesByProjectQuery"><![CDATA[
    select issue 
    from Issue as issue 
    where issue.project.id = :projectId ]]>
    </query>
    
    <query name="IssuesByProjectAndLowerStatusQuery"><![CDATA[
    select issue 
    from Issue as issue 
    where issue.project.id = :projectId 
    and issue.status < :maxExclusiveStatus ]]>
    </query>
    
    <query name="IssueCountByProjectAndLowerStatusQuery"><![CDATA[
    select count(issue) 
    from Issue as issue
    where issue.project.id = :projectId 
    and issue.status < :maxExclusiveStatus ]]>
    </query>  
    
    <query name="IssuesByProjectAndHigherStatusQuery"><![CDATA[
    select issue 
    from Issue as issue 
    where issue.project.id = :projectId 
    and issue.status >= :minStatus ]]>
    </query>
    
    <query name="IssueCountByProjectAndHigherStatusQuery"><![CDATA[
    select count(issue) 
    from Issue as issue 
    where issue.project.id = :projectId 
    and issue.status >= :minStatus ]]>
    </query>
    
    <query name="IssuesByOwnerQuery"><![CDATA[
    select issue 
    from Issue as issue 
    where issue.owner.id = :ownerId
    and issue.status < :maxExclusiveStatus ]]>
    </query>
    
    <query name="IssuesByOwnerInAvailableProjectsQuery"><![CDATA[
    select issue 
    from Issue as issue 
    inner join issue.project as project 
    where project.status in (1, 2) 
    and issue.owner.id = :ownerId
    and issue.status < :maxExclusiveStatus ]]>
    </query>
    
    <query name="IssuesUnassignedQuery"><![CDATA[
    select issue 
    from Issue as issue 
    where issue.owner is null
    and issue.status <= :maxStatus ]]>
    </query>
    
    <query name="IssuesByCreatorQuery"><![CDATA[
    select issue 
    from Issue as issue 
    where issue.creator.id = :creatorId
    and issue.status < :maxExclusiveStatus ]]>
    </query>
    
    <query name="IssuesByCreatorInAvailableProjectsQuery"><![CDATA[
    select issue 
    from Issue as issue 
    inner join issue.project as project 
    where project.status in (1, 2)
    and issue.creator.id = :creatorId
    and issue.status < :maxExclusiveStatus ]]>
    </query>
    
    <!--query name="IssuesByOwnerInAvailableProjectsQuery"><![CDATA[
    select issue 
    from Issue as issue 
    inner join issue.project as project 
    where project.status = 1 
    and issue.owner.id = :ownerId
    and issue.status not in :excludedIssueStatuses ]]>
    </query-->
    
    <query name="IssuesByNotificationQuery"><![CDATA[
    select distinct issue 
    from Issue as issue 
    inner join issue.notifications as notification 
    where notification.user.id = :userId 
    and issue.status < :maxExclusiveStatus ]]>
    </query>
    
    <query name="IssuesByNotificationInAvailableProjectsQuery"><![CDATA[
    select distinct issue 
    from Issue as issue 
    inner join issue.project as project
    inner join issue.notifications as notification
    where project.status in (1, 2)
    and notification.user.id = :userId 
    and issue.status < :maxExclusiveStatus]]>
    </query>
    
    <query name="IssuesByComponentQuery"><![CDATA[
    select issue 
    from Issue as issue 
    inner join issue.components as component 
    where component.id = :componentId ]]>
    </query>

    <query name="IssueCountByComponentQuery"><![CDATA[
    select count(issue) 
    from Issue as issue 
    inner join issue.components as component 
    where component.id = :componentId ]]>
    </query>

    <query name="IssuesByVersionQuery"><![CDATA[
    select issue 
    from Issue as issue 
    inner join issue.versions as version 
    where version.id = :versionId ]]>
    </query>

    <query name="IssueCountByVersionQuery"><![CDATA[
    select count(issue) 
    from Issue as issue 
    inner join issue.versions as version 
    where version.id = :versionId ]]>
    </query>

    <query name="MaxIssueModificationDateQuery"><![CDATA[
    select max(issue.lastModifiedDate) 
    from Issue as issue 
    where issue.project.id = :projectId ]]>
    </query>
</hibernate-mapping>
