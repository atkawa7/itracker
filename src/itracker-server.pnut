use("functional")

require("itracker-utils")
require("taskscheduling")

require("dbconfig-server")

import java.util.*

import org.springframework.orm.hibernate3.*
import org.springframework.remoting.rmi.*

import org.apache.commons.dbcp.*
import com.mchange.v2.c3p0.*

import org.itracker.services.implementations.* 

function getServices(transactionManager, daos) {
	configurationDAO, languageDAO, customFieldValueDAO, customFieldDAO, reportDAO, userDAO, projectDAO, componentDAO, versionDAO, userPreferencesDAO, permissionDAO, issueDAO, issueHistoryDAO, notificationDAO, issueRelationDAO, issueAttachmentDAO, issueActivityDAO, projectScriptDAO, workflowScriptDAO = daos
		
	// main service layer
	properties = Properties()
	properties.load(Class.getResourceAsStream("/configuration.properties"))	
	configurationService=ConfigurationServiceImpl(properties, configurationDAO, customFieldDAO, customFieldValueDAO, languageDAO, projectScriptDAO, workflowScriptDAO)
	issueService=IssueServiceImpl(userDAO, projectDAO, issueDAO, issueHistoryDAO, notificationDAO, issueRelationDAO, issueAttachmentDAO, componentDAO, issueActivityDAO, versionDAO)
	issueSearchService=IssueSearchServiceImpl(issueDAO, issueService, configurationService)
	projectService=ProjectServiceImpl(componentDAO, customFieldDAO, projectDAO, projectScriptDAO, userDAO, versionDAO, issueDAO)
	userService=UserServiceImpl(configurationService, projectService, userDAO, projectDAO, reportDAO, permissionDAO, userPreferencesDAO)
	reportService=ReportServiceImpl(reportDAO)
	//schedulerService=null
	
	// create transactional proxies
	services = [issueSearchService,configurationService,issueService, projectService, userService,reportService/*,schedulerService*/]
		
	transactionalproxies = map(function(service) {		
		interface = getInterfaceFromImplementation(service)
		services=getServicesTransactionalProxy(service, transactionManager, {interface})
	}, services)
		
	transactionalproxies
}

// gets the name of an interface class from the implmentation instance
// based on the conventions used, i.e. 
// org.itracker.services.implementations.ReportServiceImpl 
// becomes
// org.itracker.services.ReportService
function getInterfaceFromImplementation(impl) {
	implName = "org.itracker.services." + impl.class.simpleName
	Class.forName(implName.substring(0, implName.length() - 4))
}

function startservertaskscheduler() {
	scheduler = startScheduler()
	require("server-jobs")
}

